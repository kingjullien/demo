@using SBISCCMWeb.LanguageResources
@using SBISCCMWeb.Utility;

@{
    ViewBag.Title = SearchDataLang.titleHomePage;
    Layout = null;
    string GoogleAPIKey = Helper.GoogleAPIKey;
    bool isFromSearch = ViewBag.isFromSearch;
}
<style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 95%;
    }

    #floating-panel {
        position: absolute;
        top: 10px;
        left: 1%;
        z-index: 5;
        /*background-color: #fff;*/
        /*padding: 5px;*/
        /*border: 1px solid #999;*/
        text-align: center;
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
        width: auto;
    }

        #floating-panel .form-control {
            width: 350px !important;
            height: auto;
        }

    .map_info {
        position: absolute;
        top: 50px;
        z-index: 6;
        left: 2%;
        background-color: #fff;
        text-align: left;
        padding: 5px;
        border: 1px solid #ccc;
        display: none;
        width: 380px;
    }

        .map_info p {
            margin-bottom: 0;
            color: #000;
            font-size: 13px
        }

        .map_info span {
        }

            .map_info span#statusSpan {
                font-weight: bold
            }

        .map_info .map_content {
            display: inline-block;
            line-height: 22px;
        }

        .map_info i {
            vertical-align: top;
            font-size: 30px;
            margin-right: 5px;
            color: #ea4335;
        }

        .map_info .bg_blue {
            border-top: 1px solid lightgray;
            background-color: #eef;
            padding: 10px;
            margin-top: 5px;
            max-height: 300px;
            overflow: auto;
        }

    .map_infodetails {
        border-bottom: 1px solid #ccc;
        margin-bottom: 10px;
        padding-bottom: 5px;
        display: flex
    }

        .map_infodetails:last-child {
            border-bottom: none;
            padding: 0;
            margin: 0;
        }

    .btnAddressUpdate {
        height: 35px;
    }

    .spnTypes {
        word-break: break-all;
        line-height: 1;
    }
    .googleMapContent {
        height: 700px;
        /*width: 70%;*/
        right: 0;
        left: 0;
        max-width: inherit;
        margin: 0 auto;
    }
</style>

<div class="modal" id="GoogleMapModal" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-xs">
        <!-- Modal content-->
        <div class="modal-content googleMapContent">
            <div class="modal-header">
                <div>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <h4 class="modal-title">@SearchDataLang.lblGoogleMap</h4>
            </div>
            <div class="modal-body" style="padding:0;">
                <div id="floating-panel">
                    <div class="input-group">
                        @Html.Hidden("isFromSearch", isFromSearch)
                        <input id="address" placeholder="Search location" type="textbox" class="form-control" value="@ViewBag.Address">
                        <div class="input-group-btn">
                            <button id="submit" style="padding: 10px 10px 9px 10px;" class="btn btn-primary">
                                <i class="fa fa-search" aria-hidden="true"></i>
                            </button>
                        </div>
                    </div>
                    <div class="map_info">
                        <p>@SearchDataLang.lblStatus: <span id="statusSpan"> </span></p>
                        <div class="bg_blue">
                        </div>
                    </div>
                </div>
            </div>
            <div id="map"></div>
        </div>
    </div>
</div>
<script>
    var requestError = '@SearchDataLang.msgRequestError';
    var requestErrorButNoResults = '@SearchDataLang.msgRequestErrorButNoResults';
</script>
    <script>
        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 8,
                mapTypeControl: true,
                mapTypeControlOptions: {
                    style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
                    position: google.maps.ControlPosition.TOP_RIGHT
                },
                center: { lat: -34.397, lng: 150.644 }
            });
            var geocoder = new google.maps.Geocoder();
            geocodeAddress(geocoder, map);

            document.getElementById('submit').addEventListener('click', function () {
                geocodeAddress(geocoder, map);
            });
        }
        var markers = []
        function geocodeAddress(geocoder, resultsMap) {
            var isFromSearch = $("#isFromSearch").val();
            var address = document.getElementById('address').value;
            geocoder.geocode({ 'address': address }, function (results, status) {
                $(".map_info").show();
                $("#statusSpan").removeAttr('class');
                if (status === 'OK') {
                    $("#statusSpan").text(status + requestError);
                    $("#statusSpan").addClass("ColorA");
                    $(".bg_blue").html("");
                    removemarkers();
                    if (results != null && results.length > 0) {
                        for (var cnt = 0; cnt < results.length; cnt++) {
                            resultsMap.setCenter(results[cnt].geometry.location);
                            var marker = new google.maps.Marker({
                                map: resultsMap,
                                position: results[cnt].geometry.location
                            });
                            markers.push(marker);
                            var mapInfo = "<div class='map_infodetails'>";
                            mapInfo += "<i class='fa fa-map-marker'></i>";
                            mapInfo += "<p class='map_content'>";

                            mapInfo += "<span>" + results[cnt].formatted_address + "</span><br />";
                            mapInfo += "<b>Location:</b> <span>" + results[cnt].geometry.location.lat() + "," + results[cnt].geometry.location.lng() + "  (<b>Type:</b> " + results[cnt].geometry.location_type + ")</span> <br />"
                            mapInfo += "<b>Types:</b> <span class='spnTypes'>" + results[cnt].types.join(', ') + "</span>";
                            mapInfo += "</p>";

                            if (isFromSearch.toLowerCase() == "true" && results[cnt].address_components != undefined && results[cnt].address_components.length > 0) {


                                var mapSearchCity = "";
                                var mapSearchState = "";
                                var mapSearchPostalCode = "";
                                var mapSearchCountry = "";
                                var mapSearchAddress = "";

                                var addressComponentLength = results[cnt].address_components.length;
                                for (var innerCnt = 0; innerCnt < addressComponentLength; innerCnt++) {
                                    var mResult = results[cnt].address_components[innerCnt];

                                    if ((jQuery.inArray('locality', mResult.types)) > -1) {
                                        mapSearchCity = mResult.long_name;
                                    }
                                    else if ((jQuery.inArray('administrative_area_level_1', mResult.types)) > -1) {
                                        mapSearchState = mResult.short_name;
                                    }
                                    else if ((jQuery.inArray('postal_code', mResult.types)) > -1) {
                                        mapSearchPostalCode = mResult.long_name;
                                    }
                                    else if ((jQuery.inArray('country', mResult.types)) > -1) {
                                        mapSearchCountry = mResult.short_name;
                                    }
                                    else if (((jQuery.inArray('street_number', mResult.types)) > -1) || ((jQuery.inArray('route', mResult.types)) > -1) || ((jQuery.inArray('sublocality_level_1', mResult.types)) > -1) || ((jQuery.inArray('sublocality_level_2', mResult.types)) > -1)) {
                                        mapSearchAddress += " " + mResult.long_name;
                                    }
                                }
                                mapInfo += "<button class='btn btn-Secondary btnAddressUpdate' Data-Address='" + mapSearchAddress.substring(1, mapSearchAddress.length) + "' Data-city='" + mapSearchCity + "' Data-state='" + mapSearchState + "' Data-PostalCode='" + mapSearchPostalCode + "' Data-Country='" + mapSearchCountry + "'>Update</button>"
                            }
                            mapInfo += "</div>";

                            $(".bg_blue").append(mapInfo);
                        }
                    }
                } else {
                    $("#statusSpan").text(status + requestErrorButNoResults);
                    if (status == "ZERO_RESULTS") {
                        $("#statusSpan").addClass("ColorB");
                    } if (status == "REQUEST_DENIED") {
                        $("#statusSpan").addClass(" ColorF");
                    }
                    removemarkers();
                    $(".bg_blue").html("");
                    //alert('Geocode was not successful for the following reason: ' + status);
                }
            });

            function removemarkers() {
                for (var i = 0; i < markers.length; i++) {
                    markers[i].setMap(null);
                }
                markers = []
            }
            $(document).on('click', '.btnAddressUpdate', function () {
                var address = $(this).attr("Data-Address");
                var city = $(this).attr("Data-city");
                var state = $(this).attr("Data-state");
                var PostalCode = $(this).attr("Data-PostalCode");
                var Country = $(this).attr("Data-Country");
                $("#GoogleMapModal").modal("hide");
                parent.updateValidateInputMapAddress(address, city, state, PostalCode, Country);
            })
        }
    </script>

    <script async defer src="https://maps.googleapis.com/maps/api/js?key=@GoogleAPIKey&callback=initMap"></script>
