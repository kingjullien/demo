@model SBISCCMWeb.Models.ResetPasswordViewModel
@using SBISCCMWeb.Utility;
@using Resources = ViewResources.BrandingTypes;
@using SBISCCMWeb.LanguageResources;
@{
    Layout = "~/Views/Shared/_LoginLayout.cshtml";
    ViewBag.Title = AccountLang.titleResetPassword;
    bool IsValidTime = Convert.ToBoolean(ViewBag.IsValidTime);
    var profileImg = "/Images/ClientLogos/" + Helper.ClientLogo;
    var absolutePath = HttpContext.Current.Server.MapPath(profileImg);
}
@section scripts
{
    @*@Scripts.Render("~/bundles/jqueryval")*@
    <script type="text/javascript">
        runAllForms();
    </script>
    @Scripts.Render("~/bundles/resetpassword")
}
@if (IsValidTime)
{

    <div class="row justify-content-center">
        @if (Helper.Branding == Branding.Matchbook.ToString())
        {
            <div class="col-md-4 col-md-offset-2">
                <div class="logo_sec">
                    <img src="/Image/GetAnonymousImage?imagepath=@HttpUtility.UrlEncode(Utility.GetEncryptedString(Resources.Resource_Matchbook.LoginImage))" alt="matchbook" class="img-fluid" />
                </div>
            </div>
        }
        else if (Helper.Branding == Branding.DandB.ToString())
        {
            <div class="col-md-4 col-md-offset-2">
                <div class="logo_sec">
                    <img src="/Image/GetAnonymousImage?imagepath=@HttpUtility.UrlEncode(Utility.GetEncryptedString(Resources.Resource_DandB.ImageLogin))" alt="dandb" class="img-fluid" />
                </div>
            </div>
        }
        <div class="col-md-4">
            <div class="sub_logo_sec">
                @if (System.IO.File.Exists(absolutePath))
                {
                    <img src="/Image/GetAnonymousImage?imagepath=@HttpUtility.UrlEncode(Utility.GetEncryptedString(profileImg))" alt="@SessionHelper.ClientName" class="img-fluid" />
                }
                else if (!string.IsNullOrEmpty(Helper.ClientLogo))
                {
                    if (ImageHelper.IsFileExists(@Helper.ClientLogo, ImageHelper.PictureType.clientlogo))
                    {
                        <img src="/Image/GetAnonymousBlobImage?imagepath=@HttpUtility.UrlEncode(Utility.GetEncryptedString(ImageHelper.GetImageFullURL(ImageHelper.PictureType.clientlogo, @Helper.ClientLogo)))" alt="@SessionHelper.ClientName" class="img-fluid" id="ClientLogo" />
                    }
                }
                else
                {
                    <img class="img-fluid" src="/Image/GetAnonymousImage?imagepath=@HttpUtility.UrlEncode(Utility.GetEncryptedString("/Images/Matchbook-logo.png"))" alt="Matchbook"/>
                }


                @*@if (!string.IsNullOrEmpty(Helper.ClientLogo))
                    {
                        if (ImageHelper.IsFileExists(@Helper.ClientLogo, ImageHelper.PictureType.clientlogo))
                        {
                            <img src="/Image/GetAnonymousBlobImage?imagepath=@HttpUtility.UrlEncode(Utility.GetEncryptedString(ImageHelper.GetImageFullURL(ImageHelper.PictureType.clientlogo, @Helper.ClientLogo)))" alt="@SessionHelper.ClientName" class="img-responsive" />
                        }
                    }*@
                <h4>@SessionHelper.ClientName</h4>
            </div>
        </div>
    </div>

    <div class="row w-50 m-auto">
        <div class="well sigin_cus">
            @using (Html.BeginForm("ResetPassword", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "smart-form client-form frmResetPassword", role = "form", autocomplete = "off" }))
            {
                @Html.AntiForgeryToken()
                <header>
                    @AccountLang.hdrResetYourPassword
                </header>

                <fieldset>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Code)
                    <section>
                        <label class="input">
                            <em class="icon-append fa fa-user"></em>
                            @Html.TextBoxFor(m => m.Email, new { onfocus = "this.removeAttribute('readonly');", @readonly = true, autocomplete = "off", placeholder = "Enter Email", maxlength = "200" })
                            <strong class="tooltip tooltip-top-right"><em class="fa fa-user txt-color-teal"></em> @AccountLang.lblRequiredAddressUsername</strong>
                        </label>
                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                    </section>

                    <section>
                        <label class="input">
                            <em class="icon-append fa fa-lock"></em>
                            @Html.PasswordFor(m => m.Password, new { id = "PasswordHash", autocomplete = "off", onfocus = "this.removeAttribute('readonly');", @readonly = true, placeholder = "Enter new password" })
                            <strong class="tooltip tooltip-top-right"><em class="fa fa-lock txt-color-teal"></em> @AccountLang.lblEnterYourPassword</strong>
                        </label>
                        @*@Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })*@
                    </section>

                    <section>
                        <label class="input">
                            <em class="icon-append fa fa-lock"></em>
                            @Html.PasswordFor(m => m.ConfirmPassword, new { autocomplete = "off", onfocus = "this.removeAttribute('readonly');", @readonly = true, placeholder = "Confirm new password" })
                            <strong class="tooltip tooltip-top-right"><em class="fa fa-lock txt-color-teal"></em> @AccountLang.lblEnterYourConfirmPassword</strong>
                        </label>
                        @*@Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })*@
                    </section>
                    <div id="PasswordSuggection">
                        @*<div class="PasswordExmaple">
                                <div> <span>Use suggested password</span></div>
                                <div><span id="spnRendomPswd">mY8glmM#2dh$</span></div>
                            </div>*@
                        <div class="PasswordSuggection BorderColor">
                            <span>@AccountLang.lblMinPasswordLength</span>
                            <ul>
                                <li id="listNumber">@AccountLang.lblNumber <em class="fa fa-check NumberCheckBox" style="display:none"></em></li>
                                <li id="listUpper">@AccountLang.lblUppercase <em class="fa fa-check UpperCaseCheckBox" style="display:none"></em></li>
                                <li id="listLower">@AccountLang.lblLowercase <em class="fa fa-check LowerCaseCheckBox" style="display:none"></em></li>
                                <li id="listSpChar">@AccountLang.lblSpecialCharacter <em class="fa fa-check CharacterCheckBox" style="display:none"></em></li>
                            </ul>
                            <span>@AccountLang.lblRules</span>
                        </div>
                    </div>
                </fieldset>
                <footer>
                    <button type="submit" class="btn btn-primary pull-left" id="btnResetPassword" disabled="disabled">
                        @AccountLang.lblReset
                    </button>
                </footer>
            }
        </div>
    </div>


    <div class="row">
        @*<div class="col-xs-12 col-sm-12 col-md-7 col-lg-8 hidden-xs hidden-sm">
                <div class="companylog">
                    <img src="/Image/GetAnonymousImage?imagepath=@HttpUtility.UrlEncode(Utility.GetEncryptedString("/Images/Matchbook-logo.png"))" />
                </div>
                <div class="hero"><div class="pull-left login-desc-box-l"></div></div>
                <div class="row"></div>
            </div>*@
        @*<div class="col-xs-12 col-sm-12 col-md-5 col-lg-4">
                <div class="well no-padding">
                    @using (Html.BeginForm("ResetPassword", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "smart-form client-form", role = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <header>
                            Reset your password.
                        </header>

                                <fieldset>
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.Code)
                                    <section>
                                        @Html.LabelFor(m => m.Email, new { @class = "label" })
                                        <label class="input">
                                            <i class="icon-append fa fa-user"></i>
                                            @Html.TextBoxFor(m => m.Email, new { onfocus = "this.removeAttribute('readonly');", @readonly = true, autocomplete = "off" })
                                            <b class="tooltip tooltip-top-right"><i class="fa fa-user txt-color-teal"></i> Please enter email address/username</b>
                                        </label>
                                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                                    </section>

                                    <section>
                                        @Html.LabelFor(m => m.Password, new { @class = "label" })
                                        <label class="input">
                                            <i class="icon-append fa fa-lock"></i>
                                            @Html.PasswordFor(m => m.Password, new { autocomplete = "off", onfocus = "this.removeAttribute('readonly');", @readonly = true })
                                            <b class="tooltip tooltip-top-right"><i class="fa fa-lock txt-color-teal"></i> Enter your password</b>
                                        </label>
                                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                                    </section>

                                    <section>
                                        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "label" })
                                        <label class="input">
                                            <i class="icon-append fa fa-lock"></i>
                                            @Html.PasswordFor(m => m.ConfirmPassword, new { autocomplete = "off", onfocus = "this.removeAttribute('readonly');", @readonly = true })
                                            <b class="tooltip tooltip-top-right"><i class="fa fa-lock txt-color-teal"></i> Enter your ConfirmPassword</b>
                                        </label>
                                        @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
                                    </section>
                                </fieldset>
                                <footer>
                                    <button type="submit" class="btn btn-primary pull-left">
                                        Reset
                                    </button>
                                    @if (!Helper.IsUserLoginFirstTime)
                        {
                                        @Html.ActionLink("Login", "Login", "Account", null, new { @class = "btn btn-link" })
                                    }
                                </footer>
                    }

                </div>

            </div>*@
    </div>
}
else
{
    <div class="title">
        <h1>@ViewBag.Title.</h1>
    </div>
    <div>
        <p>
            @AccountLang.lblLinkExpired @Html.ActionLink(AccountLang.lblResendLink, "ForgotPassword", "Account", new { email = "" }, null)
        </p>
    </div>
}